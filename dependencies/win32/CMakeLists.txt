cmake_minimum_required(VERSION 3.18) # for file(ARCHIVE_EXTRACT ...)

set(GTK_BUNDLE_ZIP gtk+-bundle_2.24.10-20120208_win32.zip) # TODO: find correct version. 2.14.7 is too old, see https://developer.pidgin.im/ticket/15526
IF(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/${GTK_BUNDLE_ZIP})
    message(STATUS "Fetching ${GTK_BUNDLE_ZIP}...")
    file(DOWNLOAD http://ftp.gnome.org/pub/gnome/binaries/win32/gtk+/2.24/${GTK_BUNDLE_ZIP} ${CMAKE_CURRENT_BINARY_DIR}/${GTK_BUNDLE_ZIP} SHOW_PROGRESS)
ENDIF()
IF(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/gtk/include/gtk-2.0/gtk/gtk.h)
    file(ARCHIVE_EXTRACT INPUT ${CMAKE_CURRENT_BINARY_DIR}/${GTK_BUNDLE_ZIP} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/gtk)
ENDIF()
set(GTK_INCLUDE_DIRS 
    ${CMAKE_CURRENT_BINARY_DIR}/gtk/include
    ${CMAKE_CURRENT_BINARY_DIR}/gtk/include/glib-2.0 
    ${CMAKE_CURRENT_BINARY_DIR}/gtk/include/gtk-2.0/gtk
    ${CMAKE_CURRENT_BINARY_DIR}/gtk/lib/glib-2.0/include
)
set(GTK_LIBRARY_DIRS 
    ${CMAKE_CURRENT_BINARY_DIR}/gtk/lib
)
find_file(GLIB_LIB "glib-2.0.lib" PATHS ${GTK_LIBRARY_DIRS})
find_file(PIXBUF_LIB "gdk_pixbuf-2.0.lib" PATHS ${GTK_LIBRARY_DIRS})

set(PIDGIN_VERSION 2.14.8)
set(PIDGIN_DIRNAME pidgin-${PIDGIN_VERSION})
set(PIDGIN_SOURCE_ZIP ${PIDGIN_DIRNAME}.tar.bz2)
IF(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_SOURCE_ZIP})
    message(STATUS "Fetching ${PIDGIN_SOURCE_ZIP}...")
    file(DOWNLOAD http://prdownloads.sourceforge.net/pidgin/${PIDGIN_SOURCE_ZIP} ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_SOURCE_ZIP} SHOW_PROGRESS)
ENDIF()
IF(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_DIRNAME}/libpurple/purple.h)
    file(ARCHIVE_EXTRACT INPUT ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_SOURCE_ZIP} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
ENDIF()

set(PIDGIN_BINARY_ZIP ${PIDGIN_DIRNAME}-win32-bin.zip)
IF(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_BINARY_ZIP})
    message(STATUS "Fetching ${PIDGIN_BINARY_ZIP}...")
    file(DOWNLOAD http://prdownloads.sourceforge.net/pidgin/${PIDGIN_BINARY_ZIP} ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_BINARY_ZIP} SHOW_PROGRESS)
ENDIF()
IF(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_DIRNAME}-win32bin/libpurple.dll)
    file(ARCHIVE_EXTRACT INPUT ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_BINARY_ZIP} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
ENDIF()
set(LIBPURPLE_LIB ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_DIRNAME}-win32bin/libpurple.dll)

set(PURPLE_INCLUDE_DIRS
    ${GTK_INCLUDE_DIRS}
    ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_DIRNAME}/libpurple
    PARENT_SCOPE
)
set(PURPLE_LIBRARIES
    ${GLIB_LIB} ${LIBPURPLE_LIB}
    PARENT_SCOPE
)
set(PURPLE_DATA_DIR
    ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_DIRNAME}-win32bin
    PARENT_SCOPE
)
set(PURPLE_PLUGIN_DIR
    ${CMAKE_CURRENT_BINARY_DIR}/${PIDGIN_DIRNAME}-win32bin/plugins
    PARENT_SCOPE
)

set(PIXBUF_INCLUDE_DIRS
    ${CMAKE_CURRENT_BINARY_DIR}/gtk/include/gdk-pixbuf-2.0
    PARENT_SCOPE
)
set(PIXBUF_LIBRARIES
    ${PIXBUF_LIB}
    PARENT_SCOPE
)

find_path(OPUSFILE_INCLUDE_DIR opusfile.h PATH_SUFFIXES opus)
find_path(OGG_INCLUDE_DIR ogg/ogg.h)
if(OPUSFILE_INCLUDE_DIR)
set(OPUSFILE_INCLUDE_DIRS
    ${OPUSFILE_INCLUDE_DIR}
    ${OPUSFILE_INCLUDE_DIR}/opus
    ${OGG_INCLUDE_DIR}
    PARENT_SCOPE
)
endif()

find_library(OPUSFILE_LIB opusfile)
find_library(OPUS_LIB opus)
find_library(OGG_LIB ogg)
if(OPUSFILE_LIB)
set(OPUSFILE_LIBRARIES
    ${OPUSFILE_LIB}
    ${OPUS_LIB}
    ${OGG_LIB}
    PARENT_SCOPE
)
endif()
